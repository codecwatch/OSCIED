# -*- coding: utf-8 -*-

#**********************************************************************************************************************#
#              OPEN-SOURCE CLOUD INFRASTRUCTURE FOR ENCODING AND DISTRIBUTION : ORCHESTRA
#
#  Project Manager : Bram Tullemans (tullemans@ebu.ch)
#  Main Developer  : David Fischer (david.fischer.ch@gmail.com)
#  Copyright       : Copyright (c) 2012-2013 EBU. All rights reserved.
#
#**********************************************************************************************************************#
#
# This file is part of EBU Technology & Innovation OSCIED Project.
#
# This project is free software: you can redistribute it and/or modify it under the terms of the EUPL v. 1.1 as provided
# by the European Commission. This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the European Union Public License for more details.
#
# You should have received a copy of the EUPL General Public License along with this project.
# If not, see he EUPL licence v1.1 is available in 22 languages:
#     22-07-2013, <https://joinup.ec.europa.eu/software/page/eupl/licence-eupl>
#
# Retrieved from https://github.com/ebu/OSCIED

import sys
from kombu import Queue

sys.path.append('.')

BROKER_URL = '{rabbit}'
CELERY_RESULT_BACKEND = 'mongodb'
CELERY_MONGODB_BACKEND_SETTINGS = {{
    'host': '127.0.0.1',
    'port': '{port}',
    'user': '{username}',
    'password': '{password}',
    'database': 'celery',
    'taskmeta_collection': 'taskmeta',
}}

#class OrchestraRouter(object):
#
#    def route_for_task(self, task, args=None, kwargs=None):
#        return {{'exchange': '/',
#                'exchange_type': 'topic',
#                'queue': 'transform_new',
#                'routing_key': 'transform.new'}}

#CELERY_ROUTES = (OrchestraRouter(), )
CELERY_QUEUES = (Queue('black_hole', routing_key='blackhole'),)
CELERY_CREATE_MISSING_QUEUES = True
CELERY_DEFAULT_QUEUE = 'black_hole'
CELERY_DEFAULT_EXCHANGE = '/'
CELERY_DEFAULT_EXCHANGE_TYPE = 'topic'

CELERY_IMPORTS = ('oscied_lib.TransformWorker', 'oscied_lib.PublisherWorker',)
CELERY_IGNORE_RESULT = False
CELERY_SEND_EVENTS = True
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_COMPRESSION = 'zlib'
CELERY_TRACK_STARTED = True
