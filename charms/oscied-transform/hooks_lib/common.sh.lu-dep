#!/usr/bin/env bash

#**************************************************************************************************#
#              OPEN-SOURCE CLOUD INFRASTRUCTURE FOR ENCODING AND DISTRIBUTION : TRANSFORM
#
#  Authors   : David Fischer
#  Contact   : david.fischer.ch@gmail.com / david.fischer@hesge.ch
#  Project   : OSCIED (OS Cloud Infrastructure for Encoding and Distribution)
#  Copyright : 2012 OSCIED Team. All rights reserved.
#**************************************************************************************************#
#
# This file is part of EBU/UER OSCIED Project.
#
# This project is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this project.
# If not, see <http://www.gnu.org/licenses/>
#
# Retrieved from:
#   svn co https://claire-et-david.dyndns.org/prog/OSCIED

set -o nounset # will exit if an unitialized variable is used

# Constants ========================================================================================

ECHO='juju-log' # Used by logicielsUbuntuUtils

# Charms paths
BASE_PATH=$(pwd)

# Charms files
CONFIG_FILE="$BASE_PATH/config.json"
CELERY_TEMPL_FILE="$BASE_PATH/templates/celeryconfig.py.template"
CELERY_CONFIG_FILE="$BASE_PATH/celeryconfig.py"

# Shared storage paths
STORAGE_ROOT_PATH='/mnt/storage'
STORAGE_MEDIAS_PATH="$STORAGE_ROOT_PATH/medias"
STORAGE_UPLOADS_PATH="$STORAGE_ROOT_PATH/uploads"

# Configuration ====================================================================================

if [ "$(config-get verbose)" = 'true' ] ; then
  VERBOSE=0     # true
  set -o xtrace # for verbose logging to juju debug-log
else
  VERBOSE=1 # false
fi

PUBLIC_ADDRESS=$(unit-get public-address)
THE_CONCURRENCY=$(config-get concurrency)
RABBIT_QUEUES="$(config-get rabbit_queues),$PUBLIC_ADDRESS"

MONGO_CONNECTION=$(config-get mongo_connection)
RABBIT_CONNECTION=$(config-get rabbit_connection)
API_NAT_SOCKET=$(config-get api_nat_socket)

STORAGE_IP=$(config-get storage_ip)
STORAGE_NAT_IP=$(config-get storage_nat_ip)
STORAGE_FSTYPE=$(config-get storage_fstype)
STORAGE_MOUNTPOINT=$(config-get storage_mountpoint)
STORAGE_OPTIONS=$(config-get storage_options)

# Utilities ========================================================================================

storage_config_is_enabled()
{
  [ "$STORAGE_IP" -a "$STORAGE_FSTYPE" -a "$STORAGE_MOUNTPOINT" ]
}

storage_is_mounted()
{
  mount | grep -q "$STORAGE_ROOT_PATH"
}

storage_remount()
{
  # Overrides storage parameters with charm configuration
  if storage_config_is_enabled; then # if storage options are set
    ip=$STORAGE_IP
    nat_ip=$STORAGE_NAT_IP
    fstype=$STORAGE_FSTYPE
    mountpoint=$STORAGE_MOUNTPOINT
    options=$STORAGE_OPTIONS
  # Or uses storage parameters from charm storage relation
  elif [ $# -eq 4 ]; then # if function parameters are set
    ip=$1
    nat_ip=''
    fstype=$2
    mountpoint=$3
    options=$4
  elif [ $# -eq 0 ]; then
    return
  else
    xecho "Usage: $(basename $0).storage_remount ip fstype mountpoint options"
  fi

  if [ "$nat_ip" ]; then
    pecho "Update hosts file to map storage internal address $ip to $nat_ip"
    if grep -q "$ip" /etc/hosts; then
      sed -i "s<$nat_ip .*<$nat_ip $ip<" /etc/hosts
    else
      echo "$nat_ip $ip" >> /etc/hosts
    fi
  else
    nat_ip=$ip
  fi

  storage_umount

  r=$STORAGE_ROOT_PATH
  pecho "Mount shared storage [$nat_ip] $ip:$mountpoint type $fstype options '$options' -> $r"
  if [ ! -d "$STORAGE_ROOT_PATH" ]; then
    mkdir "$STORAGE_ROOT_PATH" || xecho "Unable to create shared storage path $STORAGE_ROOT_PATH" 1
  fi

  # FIXME try 5 times, a better way to handle failure
  for i in $(seq 1 5)
  do
    if storage_is_mounted; then
      break
    else
      if [ "$options" ]
      then mount -t "$fstype" -o "$options" "$nat_ip:$mountpoint" "$STORAGE_ROOT_PATH"
      else mount -t "$fstype"               "$nat_ip:$mountpoint" "$STORAGE_ROOT_PATH"
      fi
    fi
    sleep 5
  done

  if storage_is_mounted; then
    # FIXME update /etc/fstab (?)
    pecho 'Configure Transform : Register shared storage'
    setSettingJSON_STRING "$CONFIG_FILE" 'storage_ip'         "$ip"         || xecho 'Config' 2
    setSettingJSON_STRING "$CONFIG_FILE" 'storage_fstype'     "$fstype"     || xecho 'Config' 3
    setSettingJSON_STRING "$CONFIG_FILE" 'storage_mountpoint' "$mountpoint" || xecho 'Config' 4
    setSettingJSON_STRING "$CONFIG_FILE" 'storage_options'    "$options"    || xecho 'Config' 5
  else
    xecho 'Unable to mount shared storage' 6
  fi
}

storage_umount()
{
  pecho 'Configure Transform : Unregister shared storage'
  setSettingJSON_STRING "$CONFIG_FILE" 'storage_ip'         '' || xecho 'Config' 1
  setSettingJSON_STRING "$CONFIG_FILE" 'storage_fstype'     '' || xecho 'Config' 2
  setSettingJSON_STRING "$CONFIG_FILE" 'storage_mountpoint' '' || xecho 'Config' 3
  setSettingJSON_STRING "$CONFIG_FILE" 'storage_options'    '' || xecho 'Config' 4

  if storage_is_mounted; then
    # FIXME update /etc/fstab (?)
    pecho 'Unmount shared storage (is actually mounted)'
    umount "$STORAGE_ROOT_PATH" || xecho 'Unable to unmount shared storage' 5
    recho 'Shared storage successfully unmounted'
  else
    recho 'Shared storage already unmounted'
  fi
}

storage_hook_bypass()
{
  if storage_config_is_enabled; then
    xecho 'Shared storage is set in config, storage relation is disabled' 1
  fi
}

transform_config_is_enabled()
{
  [ "$MONGO_CONNECTION" -a "$RABBIT_CONNECTION" ]
}

transform_hook_bypass()
{
  if transform_config_is_enabled; then
    xecho 'Orchestrator is set in config, transform relation is disabled' 1
  fi
}

transform_register()
{
  # Overrides transform parameters with charm configuration
  if transform_config_is_enabled; then # if transform options are set
    mongo=$MONGO_CONNECTION
    rabbit=$RABBIT_CONNECTION
    socket=$API_NAT_SOCKET
  # Or uses transform parameters from charm transform relation
  elif [ $# -eq 2 ]; then # if function parameters are set
    mongo=$1
    rabbit=$2
    socket=''
  elif [ $# -eq 0 ]; then
    return
  else
    xecho "Usage: $(basename $0).transform_register mongo rabbit"
  fi

  pecho 'Configure Transform : Register the Orchestrator'
  setSettingJSON_STRING "$CONFIG_FILE" 'mongo_connection'  "$mongo"  || xecho 'Config' 1
  setSettingJSON_STRING "$CONFIG_FILE" 'rabbit_connection' "$rabbit" || xecho 'Config' 2
  setSettingJSON_STRING "$CONFIG_FILE" 'api_nat_socket'    "$socket" || xecho 'Config' 3

  host=$(expr match "$mongo" '.*mongodb://[^:]*:[^@]*@\([^:]*\):[0-9]*/[a-z]*.*')
  port=$(expr match "$mongo" '.*mongodb://[^:]*:[^@]*@[^:]*:\([0-9]*\)/[a-z]*.*')
  user=$(expr match "$mongo" '.*mongodb://\([^:]*\):[^@]*@[^:]*:[0-9]*/[a-z]*.*')
  password=$(expr match "$mongo" '.*mongodb://[^:]*:\([^@]*\)@[^:]*:[0-9]*/[a-z]*.*')
  database=$(expr match "$mongo" '.*mongodb://[^:]*:[^@]*@[^:]*:[0-9]*/\([a-z]*\).*')
  mecho "MongoDB host=$host, port=$port, user=$user, password=$password, database=$database"
  if [ ! "$host" -o ! "$port" -o ! "$user" -o ! "$password" -o ! "$database" ]; then
    xecho 'Unable to parse MongoDB connection' 3
  fi

  a="s<RABBIT_CONNECTION<$rabbit<g"
  b="s<MONGO_HOST<$host<g"
  c="s<MONGO_PORT<$port<g"
  d="s<MONGO_USER<$user<g"
  e="s<MONGO_PASSWORD<$password<g"
  f="s<MONGO_DATABASE<$database<g"
  g="s<THE_CONCURRENCY<$THE_CONCURRENCY<g"
  sed "$a;$b;$c;$d;$e;$f;$g" "$CELERY_TEMPL_FILE" > "$CELERY_CONFIG_FILE" || xecho 'Config' 4
  recho "Orchestrator successfully registered, it's time to wake-up"
}

transform_unregister()
{
  pecho 'Configure Transform : Unregister the Orchestrator'
  setSettingJSON_STRING "$CONFIG_FILE" 'mongodb_connection'  '' || xecho 'Config' 1
  setSettingJSON_STRING "$CONFIG_FILE" 'rabbitmq_connection' '' || xecho 'Config' 2
  setSettingJSON_STRING "$CONFIG_FILE" 'api_nat_socket'      '' || xecho 'Config' 3
  rm -f "$CELERY_CONFIG_FILE"
  recho 'Orchestrator successfully unregistered'
}

# HOOKS : Charm Setup ==============================================================================

hook_install()
{
  techo 'Transform - install'

  # Fix memtest86+ : https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/1069856
  #eval $purge grub-pc grub-common
  #eval $install grub-common grub-pc

  # I decidec to use the real ffmpeg, not the libav version :
  # http://blog.pkh.me/p/13-the-ffmpeg-libav-situation.html
  # http://doc.ubuntu-fr.org/ffmpeg
  apt-add-repository -y ppa:jon-severinsson/ffmpeg

  eval $update
  eval $upgrade

  pecho 'Install and configure Network Time Protocol'
  eval $install ntp || xecho 'Unable to install ntp' 1
  eval $service ntp restart || xecho 'Unable to restart ntp service' 2

  pecho 'Install python, (the real) FFmpeg, x264 and Gluster Fileystem'
  eval $install ffmpeg x264 python python-dev python-pip glusterfs-client nfs-common || \
    xecho 'Unable to install packages' 3

  pecho 'Install BSON Binary JSON, Celery Distributed Task Queue, MongoDB API and Requests'
  pip install --upgrade bson celery ipaddr pymongo requests || xecho 'Unable to install packages' 4

  # FIXME this call is not necessary, but config-changed may create an infinite loop, so WE call it
  hook_config_changed
}

hook_uninstall()
{
  techo 'Transform - uninstall'

  hook_stop
  eval $purge ffmpeg x264 glusterfs-client nfs-common
  pip install uninstall bson celery
  eval $autoremove
}

hook_config_changed()
{
  techo 'Transform - config changed'

  hook_stop
  pecho 'Configure Transform : Set verbose, messaging queues and storage path'
  setSettingJSON_STRING  "$CONFIG_FILE" 'public_address' "$PUBLIC_ADDRESS"    || xecho 'Config' 1
  setSettingJSON_BOOLEAN "$CONFIG_FILE" 'verbose'        "$VERBOSE"           || xecho 'Config' 2
  setSettingJSON_STRING  "$CONFIG_FILE" 'rabbit_queues'  "$RABBIT_QUEUES"     || xecho 'Config' 3
  setSettingJSON_STRING  "$CONFIG_FILE" 'storage_path'   "$STORAGE_ROOT_PATH" || xecho 'Config' 4
  storage_remount
  transform_register
  hook_start
  # FIXME infinite loop is used as config-changed hook !
}

# HOOKS : Charm Service ============================================================================

hook_start()
{
  techo 'Transform - start'

  if ! storage_is_mounted; then
    recho 'WARNING Do not start Transform daemon : No shared storage'
  elif [ ! -f "$CELERY_CONFIG_FILE" ]; then
    recho 'WARNING Do not start Transform daemon : No Celery configuration file'
  elif [ ! "$RABBIT_QUEUES" ]; then
    recho 'WARNING Do not start Transform daemon : No RabbitMQ queue(s) declared'
  else
    if ! screenRunning 'Transform'; then
      cd "$BASE_PATH" || xecho "Unable to find path $BASE_PATH"
      screenLaunch 'Transform' celeryd --config 'celeryconfig' -Q "$RABBIT_QUEUES" || \
        xecho 'Unable to start Transform daemon' 1
    fi
    sleep 5
    if ! screenRunning 'Transform'; then
      xecho 'Transform is not ready' 2
    else
      recho 'Transform successfully started'
    fi
  fi
}

hook_stop()
{
  techo 'Transform - stop'

  if screenRunning 'Transform'; then
    screenKill 'Transform' || xecho 'Unable to stop Transform daemon'
  fi
}

# HOOKS : Requires Storage =========================================================================

hook_storage_relation_joined()
{
  techo 'Transform - storage relation joined'
  storage_hook_bypass
}

hook_storage_relation_changed()
{
  techo 'Transform - storage relation changed'
  storage_hook_bypass

  # Get configuration from the relation
  ip=$(relation-get private-address)
  fstype=$(relation-get fstype)
  mountpoint=$(relation-get mountpoint)
  options=$(relation-get options)

  mecho "Storage IP is $ip, fstype: $fstype, mountpoint: $mountpoint, options: $options"
  if [ ! "$ip" -o ! "$fstype" -o ! "$mountpoint" ]; then
    recho 'Waiting for complete setup'
    exit 0
  fi

  hook_stop
  storage_remount "$ip" "$fstype" "$mountpoint" "$options"
  hook_start
}

hook_storage_relation_broken()
{
  techo 'Transform - storage relation broken'
  storage_hook_bypass

  hook_stop
  storage_umount
}

# HOOKS : Requires Transform =======================================================================

hook_transform_relation_joined()
{
  techo 'Transform - transform relation joined'
  transform_hook_bypass
}

hook_transform_relation_changed()
{
  techo 'Transform - transform relation changed'
  transform_hook_bypass

  # Get configuration from the relation
  orchestra_ip=$(relation-get private-address)
  mongo=$(relation-get mongo_connection)
  rabbit=$(relation-get rabbit_connection)
  mecho "Orchestra IP is $orchestra_ip, MongoDB is $mongo, RabbitMQ is $rabbit"
  if [ ! "$orchestra_ip" -o ! "$mongo" -o ! "$rabbit" ]; then
    recho 'Waiting for complete setup'
    exit 0
  fi
  hook_stop
  transform_register "$mongo" "$rabbit"
  hook_start
}

hook_transform_relation_broken()
{
  techo 'Transform - transform relation broken'
  transform_hook_bypass

  hook_stop
  transform_unregister
}
