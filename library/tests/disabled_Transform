# -*- coding: utf-8 -*-

#**********************************************************************************************************************#
#              OPEN-SOURCE CLOUD INFRASTRUCTURE FOR ENCODING AND DISTRIBUTION : COMMON LIBRARY
#
#  Project Manager : Bram Tullemans (tullemans@ebu.ch)
#  Main Developer  : David Fischer (david.fischer.ch@gmail.com)
#  Copyright       : Copyright (c) 2012-2013 EBU. All rights reserved.
#
#**********************************************************************************************************************#
#
# This file is part of EBU Technology & Innovation OSCIED Project.
#
# This project is free software: you can redistribute it and/or modify it under the terms of the EUPL v. 1.1 as provided
# by the European Commission. This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the European Union Public License for more details.
#
# You should have received a copy of the EUPL General Public License along with this project.
# If not, see he EUPL licence v1.1 is available in 22 languages:
#     22-07-2013, <https://joinup.ec.europa.eu/software/page/eupl/licence-eupl>

import os, sys
from os.path import abspath, dirname, join
sys.path.append(abspath(dirname(dirname(__file__))))
sys.path.append(abspath(join(dirname(dirname(__file__)), u'pytoolbox')))

from celery.task.control import inspect
import oscied_lib.Transform
#from celery.task.sets import TaskSet
from oscied_lib.Media import MEDIA_TEST
from oscied_lib.TransformProfile import TRANSFORM_PROFILE_TEST
from oscied_lib.User import USER_TEST

#def make_pi_tasks():
#    taskset = TaskSet(lib.Publisher.make_pi.subtask((x, )) for x in NUM_CALCS)
#    print "Dispatching tasks"
#    taskset_result = taskset.apply_async()
#    print "Waiting for results"
#    results = taskset_result.join_native()
#    print "Results:"
#    for i in results:
#        print i

raise ValueError(u'FIXME issue #6')

if __name__ == u'__main__':
    user = USER_TEST
    media_in = MEDIA_TEST
    media_out = MEDIA_TEST
    profile = TRANSFORM_PROFILE_TEST
    print(u'Launch the transformation task')
    result = lib.Transform.transform_task.apply_async(
        args=(user.json(), media_in.json(), media_out.json(), profile.json(),),
        queue=u'transform_private')
    print(result.state)
    print(result)
    i = inspect()
    dump = i.active()
    print(dump)
    if dump:
        for worker, tasks in dump.iteritems():
            print(worker)
            for task in tasks:
                if task[u'name'] == u'Transform.transform_task':
                    for key, value in task.iteritems():
                        print(u'key {0} = {1}'.format(key, value))
                    #print 'THE Task ' + str(task)
                    #print 'Arguments ' + str(task['args'])
                    print(u'salut')

    sys.exit(0)
#    make_pi_tasks()
