#!/usr/bin/env bash

#**************************************************************************************************#
#              OPEN-SOURCE CLOUD INFRASTRUCTURE FOR ENCODING AND DISTRIBUTION : CLOUD
#
#  Authors   : David Fischer
#  Contact   : david.fischer.ch@gmail.com / david.fischer@hesge.ch
#  Project   : OSCIED (OS Cloud Infrastructure for Encoding and Distribution)
#  Copyright : 2012-2013 OSCIED Team. All rights reserved.
#**************************************************************************************************#
#
# This file is part of EBU/UER OSCIED Project.
#
# This project is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this project.
# If not, see <http://www.gnu.org/licenses/>
#
# Retrieved from:
#   svn co https://claire-et-david.dyndns.org/prog/OSCIED

set -o nounset # will exit if an unitialized variable is used

# Prevent importing N times the following (like C++ .h : #ifndef ... #endif)
if ! cloudCommonImported 2>/dev/null; then

# Constants ========================================================================================

SCRIPTS_PATH=$(pwd)
BASE_PATH=$(dirname "$SCRIPTS_PATH")
FILES_PATH=$BASE_PATH'/files'
COMMON_FILES_PATH=$FILES_PATH'/common'
CONFIG_FILES_PATH=$FILES_PATH'/config'
NTP_CONF_FILE='/etc/ntp.conf'
NTP_HACK_FILE=$COMMON_FILES_PATH'/ntp.conf.hack'
NETWORK_CONF_FILE='/etc/network/interfaces'
SYSCTL_CONF_FILE='/etc/sysctl.conf'
LIBVIRTD_CONF_FILE='/etc/libvirt/libvirtd.conf'
LIBVIRTD_INIT_FILE='/etc/init/libvirt-bin.conf'
LIBVIRTD_DEF_FILE='/etc/default/libvirt-bin'
QEMU_CONF_FILE='/etc/libvirt/qemu.conf'
QEMU_PATCH_FILE=$COMMON_FILES_PATH'/qemu.conf.patch'
KEYSTONE_FILES_PATH=$CONFIG_FILES_PATH'/keystone'
KEYSTONE_TENANTS_FILE=$KEYSTONE_FILES_PATH'/tenants'
KEYSTONE_USERS_FILE=$KEYSTONE_FILES_PATH'/users'
KEYSTONE_ROLES_FILE=$KEYSTONE_FILES_PATH'/roles'
KEYSTONE_USERS_ROLES_FILE=$KEYSTONE_FILES_PATH'/usersRoles'
KEYSTONE_SERVICES_FILE=$KEYSTONE_FILES_PATH'/services'
KEYSTONE_ENDPOINTS_FILE=$KEYSTONE_FILES_PATH'/endpoints'
KEYSTONE_CONF_FILE='/etc/keystone/keystone.conf'
GLANCE_API_CONF_FILE='/etc/glance/glance-api.conf'
GLANCE_API_PASTE_FILE='/etc/glance/glance-api-paste.ini'
GLANCE_REGISTRY_CONF_FILE='/etc/glance/glance-registry.conf'
GLANCE_REGISTRY_PASTE_FILE='/etc/glance/glance-registry-paste.ini'
NOVA_FILES_PATH=$COMMON_FILES_PATH'/nova'
NOVA_CONF_FILE='/etc/nova/nova.conf'
NOVA_TEMPL_FILE=$NOVA_FILES_PATH'/nova.conf.template'
NOVA_API_PASTE_FILE='/etc/nova/api-paste.ini'
NOVA_API_HACK_FILE=$NOVA_FILES_PATH'/api-paste.ini.hack'
NOVA_COMPUTE_CONF_FILE='/etc/nova/nova-compute.conf'
NOVA_COMPUTE_HACK_FILE=$NOVA_FILES_PATH'/nova-compute.conf.hack'
QUANTUM_CONF_FILE='/etc/quantum/quantum.conf'
QUANTUM_PASTE_FILE='/etc/quantum/api-paste.ini'
QUANTUM_DHCP_CONF_FILE='/etc/quantum/dhcp_agent.ini'
QUANTUM_L3_CONF_FILE='/etc/quantum/l3_agent.ini'
QUANTUM_OVSWITCH_CONF_FILE='/etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini'
ISCSI_CONF_FILE='/etc/default/iscsitarget'
CINDER_FILES_PATH=$COMMON_FILES_PATH'/cinder'
CINDER_CONF_FILE='/etc/cinder/cinder.conf'
CINDER_APPEND_FILE=$CINDER_FILES_PATH'/cinder.conf.append'
CINDER_PASTE_FILE='/etc/cinder/api-paste.ini'
DASHBOARD_FILES_PATH=$COMMON_FILES_PATH'/dashboard'
DASHBOARD_CONF_FILE='/etc/openstack-dashboard/local_settings.py'
DASHBOARD_APPEND_FILE=$DASHBOARD_FILES_PATH'/local_settings.py.append'
QUANTUM_BUG_FILE='/usr/lib/python2.7/dist-packages/quantum/agent/linux/iptables_manager.py'

# Configuration ====================================================================================

host=$(hostname)
HOST_CONFIG_FILE=$(find "$FILES_PATH" -type f -name "$host.conf")
HOST_NETWORK_FILE=$(find "$FILES_PATH" -type f -name "$host.interfaces")

getInterface()
{
  if [ $# -ne 2 ]; then
    echo "[BUG] Usage: $(basename $0).getInterface type file" >&2
    exit 1
  fi
  content=$(sed 's:\n: :g' "$2")
  AZ='[A-Z ]*'
  REPLY_IFACE=$(expr match "$content" ".*START$AZ$1.*auto *\([a-z0-9:]*\).*END$AZ$1")
  REPLY_IP=$(expr match "$content" ".*START$AZ$1.*address *\([0-9\.]*\).*END$AZ$1.*")
  REPLY_MASK=$(expr match "$content" ".*START$AZ$1.*netmask *\([0-9\.]*\).*END$AZ$1.*")
  REPLY_GW=$(expr match "$content" ".*START$AZ$1.*gateway *\([0-9\.]*\).*END$AZ$1.*")
  if [ "$REPLY_IFACE" -a "$REPLY_IP" -a "$REPLY_MASK" ]
  then return 0
  else return 1
  fi
}

if [ ! -f "$HOST_CONFIG_FILE"  ]; then
  echo "Computer '$host' configuration file not found !" >&2
  exit 1
fi
if [ ! -f "$HOST_NETWORK_FILE" ]; then
  echo "Computer '$host' network file not found !" >&2
  exit 1
fi

if ! getInterface 'PUBLIC' "$HOST_NETWORK_FILE"; then
  echo 'Unable to detect public network interface' >&2
  exit 1
fi
HOST_PUBLIC_IFACE=$REPLY_IFACE
HOST_PUBLIC_IP=$REPLY_IP
HOST_PUBLIC_MASK=$REPLY_MASK
HOST_PUBLIC_GW=$REPLY_GW

if [ ! "$HOST_PUBLIC_GW" ]; then
  echo 'Unable to detect public network gateway' >&2
  exit 1
fi

if ! getInterface 'PRIVATE' "$HOST_NETWORK_FILE"; then
  echo 'Unable to detect private network interface' >&2
  exit 1
fi
HOST_PRIVATE_IFACE=$REPLY_IFACE
HOST_PRIVATE_IP=$REPLY_IP
HOST_PRIVATE_MASK=$REPLY_MASK

. "$HOST_CONFIG_FILE"

# FIXME a better way to handle urls ?
CONTROLLER_AUTHZ_URL="http://$CONTROLLER_PUBLIC_IP:5000/v2.0"
CONTROLLER_ADMIN_URL="http://$CONTROLLER_PRIVATE_IP:35357/v2.0"

# Utilities ========================================================================================

setSetting()
{
  if [ $# -ne 3 -a $# -ne 4 ]; then
    xecho "Usage: $(basename $0).setSetting file enabled name [value]"
  fi
  local toggle=''
  if [ $2 -eq $false ]; then toggle='#'; fi
  if [ $# -eq 3 ]; then
    $udo sed -i "s<[# ]*$3<$toggle$3<" "$1"
    $udo grep -q "$toggle$3" "$1" && return $true || return $false
  elif [ $# -eq 4 ]; then
    $udo sed -i "s<[# ]*$3 *= *.*<$toggle$3=$4<" "$1"
    $udo grep -q "$toggle$3=$4" "$1" && return $true || return $false
  fi
}

parseId()
{
  id="$(eval "$@" | grep ' id ')"
  id=$(expr match "$id" ".*\([0-9a-z]\{32\}\).*")
  if [ ! "$id" ]; then return $false; else return $true; fi
}

getId()
{
  if [ $# -ne 2 ]; then
    xecho "Usage: $(basename $0).getId category name"
  fi
  local a=$ADMIN_TOKEN
  local b=$CONTROLLER_ADMIN_URL
  id="$(keystone --token $a --endpoint $b ${1}-list | grep " $2 ")"
  id=$(expr match "$id" ".*\([0-9a-z]\{32\}\).*")
  if [ ! "$id" ]; then return $false; else return $true; fi
}

getPass()
{
  if [ $# -ne 1 ]; then
    xecho "Usage: $(basename $0).getPass name"
  fi

  savedIFS=$IFS
  IFS=';'
  while read enabled name pass mail description
  do
    if [ "$name" = "$1" ]; then return $true; fi
  done < "$KEYSTONE_USERS_FILE"
  IFS=$savedIFS
  return $false
}

tenantCreate()
{
  if [ $# -ne 1 ]; then
    xecho "Usage: $(basename $0).tenantCreate name"
  fi
  keystone --token $ADMIN_TOKEN --endpoint $CONTROLLER_ADMIN_URL \
    tenant-create --name "$1"
  getId 'tenant' "$1"
}

userCreate()
{
  if [ $# -ne 4 ]; then
    xecho "Usage: $(basename $0).userCreate name pass email description"
  fi
  # FIXME add user description
  keystone --token $ADMIN_TOKEN --endpoint $CONTROLLER_ADMIN_URL \
    user-create --name "$1" --pass="$2" --email="$3"
  getId 'user' "$1"
}

roleCreate()
{
  if [ $# -ne 1 ]; then
    xecho "Usage: $(basename $0).roleCreate name"
  fi
  keystone --token $ADMIN_TOKEN --endpoint $CONTROLLER_ADMIN_URL \
    role-create --name "$1"
  getId 'role' "$1"
}

serviceCreate()
{
  if [ $# -ne 3 ]; then
    xecho "Usage: $(basename $0).serviceCreate name type description"
  fi
  # FIXME add service description
  keystone --token $ADMIN_TOKEN --endpoint $CONTROLLER_ADMIN_URL \
    service-create --name "$1" --type="$2"
  getId 'service' "$1"
}

endpointCreate()
{
  if [ $# -ne 5 ]; then
    xecho "Usage: $(basename $0).endpointCreate region serviceId publicUrl internalUrl adminUrl"
  fi
  keystone --token $ADMIN_TOKEN --endpoint $CONTROLLER_ADMIN_URL \
    endpoint-create --region "$1" --service-id=$2 \
    --publicurl=$3 --internalurl=$4 --adminurl=$5
}

userRoleAdd()
{
  if [ $# -ne 3 ]; then
    xecho "Usage: $(basename $0).userRoleAdd tenantId userId roleId"
  fi
  keystone --token $ADMIN_TOKEN --endpoint $CONTROLLER_ADMIN_URL \
    user-role-add --tenant-id=$1 --user-id=$2 --role-id=$3
}

tokenGet()
{
  if [ $# -eq 2 ]; then
    keystone --os-username="$1" --os-password="$2" \
      --os-auth-url=$CONTROLLER_ADMIN_URL token-get
  elif [ $# -eq 3 ]; then
    keystone --os-username="$1" --os-password="$2" --os-tenant-name="$3" \
      --os-auth-url=$CONTROLLER_ADMIN_URL token-get
  else
    xecho "Usage: $(basename $0).tokenGet username password [tenantName]"
  fi
}

imageCreateQcow2()
{
  if [ $# -ne 7 ]; then
    xecho "Usage: $(basename $0).imageCreateQcow2 username password tenantName public imageName imageFile imageUrl"
  fi

  archive=$(basename "$7")
  name=$(basename "$archive" .tar.gz)
  [ $4 -eq $true ] && public='--public' || public=''
  tmp=$(mktemp -d)
  cd $tmp || return $false
  wget -N "$7"
  tar -zxvf "$archive"
  [ ! -f "$6" ] && return $false
  id=$(glance --os-username="$1" --os-password="$2" --os-tenant-name="$3" \
    --os-auth-url=$CONTROLLER_AUTHZ_URL image-create \
    $public --name "$5" --container-format ovf --disk-format qcow2 < "$6")
  id=$(expr match "$id" ".*\([0-9a-z]\{8\}-[0-9a-z]\{4\}-[0-9a-z]\{4\}-[0-9a-z]\{4\}-[0-9a-z]\{12\}\).*")
  if [ ! "$id" ]; then return $false; else return $true; fi
}

imageCreateAll()
{
  if [ $# -ne 4 ]; then
    xecho "Usage: $(basename $0).imageCreateAll username password tenantName imageUrl"
  fi

  archive=$(basename "$4")
  name=$(basename "$archive" .tar.gz)
  mkdir /tmp/images 2>/dev/null
  cd /tmp/images || return $false
  wget -N "$4"
  tar -zxvf "$archive" || return $false
  imageCreateLinuxKernel  "$1" "$2" "$3" "${name}-vmlinuz" || return $false; kernelId=$id
  imageCreateLinuxRamdisk "$1" "$2" "$3" "${name}-loader"  || return $false; ramdiskId=$id
  imageCreateLinux "$1" "$2" "$3" "${name}.img" $kernelId $ramdiskId || return $false
}

imageCreateLinuxKernel()
{
  if [ $# -ne 4 ]; then
    xecho "Usage: $(basename $0).imageCreateLinuxKernel username password tenantName imagePath"
  fi
  id=$(glance --os-username="$1" --os-password="$2" --os-tenant-name="$3" \
    --os-auth-url=$CONTROLLER_AUTHZ_URL image-create \
    --name='tty-linux-kernel' --disk-format='aki' --container-format='aki' < "$4")
  id=$(expr match "$id" ".*\([0-9a-z]\{8\}-[0-9a-z]\{4\}-[0-9a-z]\{4\}-[0-9a-z]\{4\}-[0-9a-z]\{12\}\).*")
  if [ ! "$id" ]; then return $false; else return $true; fi
}

imageCreateLinuxRamdisk()
{
  if [ $# -ne 4 ]; then
    xecho "Usage: $(basename $0).imageCreateLinuxRamdisk username password tenantName imagePath"
  fi
  id=$(glance --os-username="$1" --os-password="$2" --os-tenant-name="$3" \
    --os-auth-url=$CONTROLLER_AUTHZ_URL image-create \
    --name='tty-linux-ramdisk' --disk-format='ari' --container-format='ari' < "$4")
  id=$(expr match "$id" ".*\([0-9a-z]\{8\}-[0-9a-z]\{4\}-[0-9a-z]\{4\}-[0-9a-z]\{4\}-[0-9a-z]\{12\}\).*")
  if [ ! "$id" ]; then return $false; else return $true; fi
}

imageCreateLinux()
{
  if [ $# -ne 6 ]; then
    xecho "Usage: $(basename $0).imageCreate username password tenantName imagePath kernelId ramdiskId"
  fi
  glance --os-username="$1" --os-password="$2" --os-tenant-name="$3" \
    --os-auth-url=$CONTROLLER_AUTHZ_URL image-create \
    --name='tty-linux' --disk-format='ami' --container-format='ami' \
    --property kernel_id=$5 --property ramdisk_id=$6 < "$4"
}

cloudCommonImported()
{
  echo > /dev/null
}
fi
